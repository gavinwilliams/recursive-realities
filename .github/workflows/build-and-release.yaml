name: Auto Version, Build & Release eBooks

on:
  push:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  tag:
    name: Auto Version Tag
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate daily incremental version tag
        id: create_tag
        run: |
          DATE_TAG="$(date +'%Y.%m.%d')"
          LATEST_TAG=$(git tag --list "${DATE_TAG}.*" | sort -V | tail -n 1)

          if [ -z "$LATEST_TAG" ]; then
            BUILD_NUMBER=1
          else
            BUILD_NUMBER=$(( $(echo "$LATEST_TAG" | sed -E "s/.*\.([0-9]+)/\1/") + 1 ))
          fi

          NEW_TAG="${DATE_TAG}.${BUILD_NUMBER}"
          echo "Creating new tag: $NEW_TAG"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

  build:
    name: Convert Markdown to PDF, EPUB & HTML
    runs-on: ubuntu-latest
    needs: tag
    container:
      image: pandoc/latex:latest-ubuntu
      env:
        LANG: C.UTF-8

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create build directory
        run: mkdir -p build

      - name: Convert Markdown files to PDF, EPUB & HTML
        run: |
          cd src
          echo "🟢 Starting Pandoc conversions..."
          for f in *.md; do
            if [ ! -f "$f" ]; then
              echo "⚠️ No markdown files found in /src."
              exit 0
            fi
            b=$(basename "$f" .md)
            echo "⚙️ Converting $f → PDF..."
            pandoc "$f" -f markdown -t pdf -o "../build/${b}.pdf" --pdf-engine=xelatex --verbose
            echo "✅ PDF done for $b"
            pandoc "$f" -f markdown -t epub -o "../build/${b}.epub" --verbose
            echo "✅ EPUB done for $b"
            pandoc "$f" -f markdown -t html -o "../build/${b}.html" --standalone --metadata title="${b}" --verbose
            echo "✅ HTML done for $b"
          done
          echo "🏁 All conversions completed."

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ebooks
          path: build/

  release:
    name: Create or Update GitHub Release
    needs: [tag, build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify tag exists
        run: |
          echo "Checking for tag: ${{ needs.tag.outputs.tag_name }}"
          git fetch --tags
          if ! git rev-parse "${{ needs.tag.outputs.tag_name }}" >/dev/null 2>&1; then
            echo "❌ Tag ${{ needs.tag.outputs.tag_name }} not found! Exiting."
            exit 1
          fi

      - name: Wait for tag propagation
        run: sleep 10

      - name: Create or update release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.tag.outputs.tag_name }}
          name: "Release ${{ needs.tag.outputs.tag_name }}"
          body: "Auto-generated release of converted eBooks."
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ebooks
          path: build/

      - name: Upload eBooks to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag.outputs.tag_name }}
          files: build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release summary comment
        run: |
          echo "## 📚 Release Summary — ${{ needs.tag.outputs.tag_name }}" > release-summary.md
          echo "" >> release-summary.md
          echo "The following eBook formats were generated automatically:" >> release-summary.md
          echo "" >> release-summary.md
          for f in build/*; do
            FILE_NAME=$(basename "$f")
            echo "- [${FILE_NAME}](https://github.com/${{ github.repository }}/releases/download/${{ needs.tag.outputs.tag_name }}/${FILE_NAME})" >> release-summary.md
          done
          echo "" >> release-summary.md
          echo "_Generated automatically by GitHub Actions._" >> release-summary.md

      - name: Upload release summary as comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "📘 eBook Release Summary"
          path: release-summary.md